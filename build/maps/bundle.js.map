{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","src/js/positiveSum/positiveSum.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_positiveSum","array","document","addEventListener","console","log","positiveArray","filter","item","sum","forEach"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gBCAA,MAAAK,KAAAX,EAAA,0DAEA,IAAMY,EAAQ,CAAC,GAAG,EAAE,EAAE,EAAE,GAOpBC,SAASC,iBAAiB,mBAAoB,WAJ9CC,QAAQC,IAAI,kBAAkB,EAAAL,EAAA,SAAYC,0ICL1B,WAACA,GACpB,IAAMK,EAAiBL,EAAMM,OAAO,SAAAC,GAAI,OAAW,EAAPA,IAExCC,EAAM,EAMV,OAJAH,EAAcI,QAAQ,SAAAF,GACrBC,GAAYD,IAGNC","file":"../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import positiveSum from './positiveSum/positiveSum';\r\n\r\nconst array = [1,-2,3,4,5];\r\n\r\nfunction init() {\r\n    console.log('Positive Sum: ', positiveSum(array));\r\n}\r\n\r\n(function () {\r\n    document.addEventListener('DOMContentLoaded', function(){\r\n        init();\r\n    })\r\n})();","const positiveSum = (array) => {\n\tconst positiveArray =  array.filter(item => item > 0);\n\t\n\tlet sum = 0;\n\t\n\tpositiveArray.forEach(item => {\n\t\tsum = sum + item;\n\t});\n\t\n\treturn sum;\n};\n\nexport default positiveSum;"]}